[{"title":"《群英传》读书记 —— Android 控件","url":"http://ginkwang.github.io/2018/12/20/《群英传》读书记 —— Android 控件/","content":"<h3 id=\"控件架构\"><a href=\"#控件架构\" class=\"headerlink\" title=\"控件架构\"></a>控件架构</h3><p>Android 每个控件都会在界面中占据一块矩形区域，而在 Android 中，控件大致被分为两类 —— ViewGroup 和 View。</p>\n<p>ViewGroup 是 View 的父控件。</p>\n<h3 id=\"View-的测量\"><a href=\"#View-的测量\" class=\"headerlink\" title=\"View 的测量\"></a>View 的测量</h3><p>Android 在绘制 View 前，必须对 View 进行测量，即让系统知道要绘制一个多大的 View。</p>\n<p>这个过程在 onMeasure() 中执行。</p>\n<p>执行 View 测量的类是 —— Measure 类，测量模式分为以下三种：</p>\n<ul>\n<li><strong>EXACTLY</strong>：精确值模式</li>\n<li><strong>AT_MOST</strong>：最大值模式</li>\n<li><strong>UNSPECIFIDE</strong>：不指定 View 大小进行测量，View 想多大就多大，通常在绘制自定义 View 时使用。</li>\n</ul>\n<p>View 类默认的 onMeasure() 方法只支持 EXACTLY 模式。</p>\n<h3 id=\"View-的绘制\"><a href=\"#View-的绘制\" class=\"headerlink\" title=\"View 的绘制\"></a>View 的绘制</h3><p>绘制 View 要重写 onDraw() 方法，并使用系统提供的绘制 2D View 的 Canvas 对象。</p>\n<p>创建 Canvas 对象时要传入一个 bitmap 参数，使之与创建的 Canvas 画布紧密联系在一起，这一步称为“装载画布”。</p>\n<p>这个 bitmap 存储所有在 Canvas 上绘制的像素信息。</p>\n<h3 id=\"ViewGroup-的绘制\"><a href=\"#ViewGroup-的绘制\" class=\"headerlink\" title=\"ViewGroup 的绘制\"></a>ViewGroup 的绘制</h3><p>ViewGroup 会管理其子 View，其中就会管理其子 View 的大小。</p>\n<p>ViewGroup 在测量时会通过遍历所有子 View，从而调用子 View 的 Measure 方法来获取每个子 View 的测量结果。</p>\n<h3 id=\"ViewGroup-的绘制-1\"><a href=\"#ViewGroup-的绘制-1\" class=\"headerlink\" title=\"ViewGroup 的绘制\"></a>ViewGroup 的绘制</h3><p>ViewGroup 不需要绘制，但是 ViewGroup 会使用 dispatchDraw() 方法来绘制其子 View，其过程是通过遍历所有子 View，并调用子 View 的绘制方法完成绘制工作。</p>\n","categories":["Android"],"tags":["Android","读书笔记","控件"]},{"title":"dva源码解读","url":"http://ginkwang.github.io/2018/04/11/dva源码解读/","content":"<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><p>本文章用于个人学习研究，并不代表 dva 团队的任何观点。</p>\n<p>原文以及包含一定注释的代码见<a href=\"https://github.com/aircloud/dva-analysis\" target=\"_blank\" rel=\"noopener\">这里</a>，若有问题也可以在<a href=\"https://github.com/aircloud/dva-analysis/issues\" target=\"_blank\" rel=\"noopener\">这里</a>进行讨论</p>\n<h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><h4 id=\"为什么是dva\"><a href=\"#为什么是dva\" class=\"headerlink\" title=\"为什么是dva?\"></a>为什么是dva?</h4><p>笔者对 dva 的源代码进行解读，主要考虑到 dva 并不是一个和我们熟知的主流技术无关的从0到1的框架，相反，它是对主流技术进行整合，提炼，从而形成一种最佳实践，分析 dva，意味着我们可以对自己掌握的很多相关技术进行回顾，另外，dva 的代码量并不多，也不至于晦涩难懂，可以给我们平时的业务开发以启发。</p>\n<p>本文章作为 dva 的源码解读文章，并不面向新手用户，读者应当有一定的 react 使用经验和 ECMAscript 2015+ 的使用经验，并且应当了解 redux 和 redux-saga，以及对 dva 的使用有所了解(可以从<a href=\"https://github.com/dvajs/dva/blob/master/README_zh-CN.md#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8-dva-\" target=\"_blank\" rel=\"noopener\">这里</a>了解为什么需要使用 dva)</p>\n<p>重点推荐:</p>\n<ul>\n<li>通过<a href=\"https://github.com/dvajs/dva-knowledgemap\" target=\"_blank\" rel=\"noopener\">这里</a>的内容了解使用dva的最小知识集</li>\n<li>通过<a href=\"https://redux-saga-in-chinese.js.org/docs/introduction/index.html\" target=\"_blank\" rel=\"noopener\">这里</a>学习 redux-saga</li>\n</ul>\n<p>其他推荐：</p>\n<ul>\n<li><a href=\"https://github.com/dvajs/dva/blob/master/docs/Concepts_zh-CN.md\" target=\"_blank\" rel=\"noopener\">dva的概念</a></li>\n<li><a href=\"https://github.com/dvajs/dva/blob/master/docs/API_zh-CN.md\" target=\"_blank\" rel=\"noopener\">dva的全部API</a></li>\n<li><a href=\"https://github.com/sorrycc/blog/issues/1\" target=\"_blank\" rel=\"noopener\">React+Redux 最佳实践</a></li>\n<li><a href=\"http://slides.com/sorrycc/dva#/\" target=\"_blank\" rel=\"noopener\">React在蚂蚁金服的实践</a></li>\n<li><a href=\"https://github.com/sorrycc/blog/issues/48\" target=\"_blank\" rel=\"noopener\">dva 2.0的改进</a></li>\n<li><a href=\"http://cn.redux.js.org/docs/recipes/ComputingDerivedData.html\" target=\"_blank\" rel=\"noopener\">ReSelect介绍</a></li>\n<li><a href=\"https://www.jianshu.com/p/04d3fefea8d7\" target=\"_blank\" rel=\"noopener\">浅析Redux 的 store enhancer</a></li>\n</ul>\n<p>几个 dva 版本之间的关系:</p>\n<ul>\n<li><a href=\"mailto:dva@2.0\" target=\"_blank\" rel=\"noopener\">dva@2.0</a>：基于 react 和 react-router@4</li>\n<li><a href=\"mailto:dva-react-router-3@1.0\" target=\"_blank\" rel=\"noopener\">dva-react-router-3@1.0</a>：基于 react 和 react-router@3</li>\n<li><a href=\"mailto:dva-no-router@1.0\" target=\"_blank\" rel=\"noopener\">dva-no-router@1.0</a>：无路由版本，适用于多页面场景，可以和 next.js 组合使用</li>\n<li><a href=\"mailto:dva-core@1.0\" target=\"_blank\" rel=\"noopener\">dva-core@1.0</a>：仅封装了 redux 和 redux-saga</li>\n</ul>\n<p>我们本次主要分析目标为 <a href=\"mailto:dva@2.0\" target=\"_blank\" rel=\"noopener\">dva@2.0</a> 和 <a href=\"mailto:dva-core@1.0\" target=\"_blank\" rel=\"noopener\">dva-core@1.0</a></p>\n<h3 id=\"我们为什么需要-redux-saga\"><a href=\"#我们为什么需要-redux-saga\" class=\"headerlink\" title=\"我们为什么需要 redux-saga\"></a>我们为什么需要 redux-saga</h3><p>目前，在大多数项目开发中，我们现在依然采用的是redux-thunk + async/await (或 Promise)。</p>\n<p>实际上这个十几行的插件已经完全可以解决大多是场景下的问题了，如果你在目前的工作中正在使用这一套方案并且能够完全将当下的需求应付自如并且没有什么凌乱的地方，其实也是没有必要换成redux-saga的。</p>\n<p>接下来我们讲 redux-saga，先看名字：saga，这个术语常用于CQRS架构，代表查询与责任分离。</p>\n<p>相比于 redux-thunk，前者通常是把数据查询等请求放在 actions 中(不纯净的 actions)，并且这些 actions 可以继续回调调用其他 actions(纯净的 actions)，从而完成数据的更新；而 redux-saga，则保持了 actions 的纯粹性，单独抽出一层专门来处理数据请求等操作(saga函数)。</p>\n<p>这样做还有另外一些好处：</p>\n<ul>\n<li>由于我们已经将数据处理数据请求等异步操作抽离出来了，并且通过 generator 来处理，我们便可以方便地进行多种异步管理：比如同时按顺序执行多个任务、在多个异步任务中启动race等。</li>\n<li>这样做可以延长任务的生命周期，我们的一次调用可以不再是一个”调完即走”的过程，还可以是一个LLT（Long Lived Transaction)的事物处理过程，比如我们可以将用户的登入、登出的管理放在一个saga函数中处理。</li>\n</ul>\n<p>当然，redux-saga还有比如拥有有诸多常用并且声明式易测的 Effects、可以无阻塞的fork等一些更复杂的异步操作和管理方法，如果应用中有较多复杂的异步操作流程，使用redux-saga无疑会让条理更加清楚。</p>\n<p>当然，本文的目的不是介绍或者安利redux-saga，只是因为redux-saga是 dva 的一个基础，相关概念点到为止，如需了解更多请自行参考资料。</p>\n<h3 id=\"dva-源码解读\"><a href=\"#dva-源码解读\" class=\"headerlink\" title=\"dva 源码解读\"></a>dva 源码解读</h3><p>我们的源码分析流程是这样的：通过一个使用 dva 开发的例子，随着其对 dva 函数的逐步调用，来分析内部 dva 相关函数的实现原理。</p>\n<p>我们分析采用的例子是 dva 官方提供的一个增删改查的应用，可以在<a href=\"https://github.com/dvajs/dva/tree/rewrite-dynamic\" target=\"_blank\" rel=\"noopener\">这里</a>找到它的源代码。</p>\n<p>我们先看该例子的入口文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import dva from &apos;dva&apos;;</span><br><span class=\"line\">import createHistory from &apos;history/createBrowserHistory&apos;;</span><br><span class=\"line\">import createLoading from &apos;dva-loading&apos;;</span><br><span class=\"line\">import &#123; message &#125; from &apos;antd&apos;;</span><br><span class=\"line\">import &apos;./index.css&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const ERROR_MSG_DURATION = 3; // 3 秒</span><br><span class=\"line\"></span><br><span class=\"line\">// 1. Initialize</span><br><span class=\"line\">const app = dva(&#123;</span><br><span class=\"line\">  history: createHistory(),</span><br><span class=\"line\">  onError(e) &#123;</span><br><span class=\"line\">    message.error(e.message, ERROR_MSG_DURATION);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. Plugins</span><br><span class=\"line\">app.use(createLoading());</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. Model</span><br><span class=\"line\">// Moved to router.js</span><br><span class=\"line\">// 这里的 Model 被转移到了动态加载的 router 里面，我们也可以如下写：</span><br><span class=\"line\">// app.model(require(&apos;./models/users&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 4. Router</span><br><span class=\"line\">app.router(require(&apos;./router&apos;));</span><br><span class=\"line\"></span><br><span class=\"line\">// 5. Start</span><br><span class=\"line\">app.start(&apos;#root&apos;);</span><br></pre></td></tr></table></figure>\n<p>我们发现dva从初始化配置到最后的start(现在的dva start函数在不传入container的情况下可以返回React Component，便于服务端渲染等，但这里我们还是按照例子的写法来)。</p>\n<p>这里我们先有必要解释一下，dva 在当前依据能力和依赖版本的不同，有多个可引入的版本，我们的例子和所要分析的源代码都是基于 react-router V4 的 dva 版本。</p>\n<p>在源代码中，相关目录主要为 dva 目录(packages/dva) 和 dva-core(packages/dva-core)目录，前者主要拥有history管理、router、动态加载等功能，而后者是不依赖这些内容的基础模块部分，为前者所引用</p>\n<h4 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h4><p>第一步这里传入了两个内容：(dva构造函数总共可以传入那些 opts，会在下文中进行说明)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const app = dva(&#123;</span><br><span class=\"line\">  history: createHistory(),</span><br><span class=\"line\">  onError(e) &#123;</span><br><span class=\"line\">    message.error(e.message, ERROR_MSG_DURATION);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这一步的相关核心代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function (opts = &#123;&#125;) &#123;</span><br><span class=\"line\">  const history = opts.history || createHashHistory(); // 默认为 HashHistory</span><br><span class=\"line\">  const createOpts = &#123;</span><br><span class=\"line\">    initialReducer: &#123;</span><br><span class=\"line\">      routing, // 来自 react-router-redux 的 routerReducer</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setupMiddlewares(middlewares) &#123;</span><br><span class=\"line\">      return [</span><br><span class=\"line\">        routerMiddleware(history), // 来自 react-router-redux 的 routerMiddleware</span><br><span class=\"line\">        ...middlewares,</span><br><span class=\"line\">      ];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setupApp(app) &#123;</span><br><span class=\"line\">      app._history = patchHistory(history); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  const app = core.create(opts, createOpts);</span><br><span class=\"line\">  const oldAppStart = app.start;</span><br><span class=\"line\">  app.router = router;</span><br><span class=\"line\">  app.start = start;</span><br><span class=\"line\">  return app;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 一些用到的函数的定义...</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面大多数内容都比较简单，这里面提两个地方：</p>\n<ol>\n<li>patchHistory：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function patchHistory(history) &#123;</span><br><span class=\"line\">  const oldListen = history.listen;</span><br><span class=\"line\">  history.listen = (callback) =&gt; &#123;</span><br><span class=\"line\">    callback(history.location);</span><br><span class=\"line\">    return oldListen.call(history, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  return history;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然，这里的意思是让第一次被绑定 listener 的时候执行一遍 callback，可以用于初始化相关操作。</p>\n<p>我们可以在<code>router.js</code>中添加如下代码来验证：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.listen((location, action)=&gt;&#123;</span><br><span class=\"line\">  console.log(&apos;history listen:&apos;, location, action)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在完成可选项的构造之后，调用了 dva-core 中暴露的 create 函数。</li>\n</ol>\n<p>create 函数本身也并不复杂，核心代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\">hooksAndOpts = &#123;&#125;, createOpts = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    initialReducer,</span><br><span class=\"line\">    setupApp = noop,</span><br><span class=\"line\">  &#125; = createOpts;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> plugin = <span class=\"keyword\">new</span> Plugin(); <span class=\"comment\">// 实例化钩子函数管理类</span></span><br><span class=\"line\">  plugin.use(filterHooks(hooksAndOpts)); <span class=\"comment\">// 这个时候先对 obj 进行清理，清理出在我们定义的类型之外的 hooks，之后进行统一绑定</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> app = &#123;</span><br><span class=\"line\">    _models: [</span><br><span class=\"line\">      prefixNamespace(&#123; ...dvaModel &#125;), <span class=\"comment\">// 前缀处理</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    _store: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    _plugin: plugin,</span><br><span class=\"line\">    use: plugin.use.bind(plugin),</span><br><span class=\"line\">    model, <span class=\"comment\">// 下文定义</span></span><br><span class=\"line\">    start, <span class=\"comment\">// 下文定义</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> app;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//一些函数的定义</span></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面我们可以看到，这里的 <code>hooksAndOpts</code> 实际上就是一开始我们构造 dva 的时候传入的 opts 对象经过处理之后的结果。</p>\n<p>我们可以传入的可选项，实际上都在 <code>Plugin.js</code> 中写明了:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const hooks = [</span><br><span class=\"line\">  &apos;onError&apos;,</span><br><span class=\"line\">  &apos;onStateChange&apos;,</span><br><span class=\"line\">  &apos;onAction&apos;,</span><br><span class=\"line\">  &apos;onHmr&apos;,</span><br><span class=\"line\">  &apos;onReducer&apos;,</span><br><span class=\"line\">  &apos;onEffect&apos;,</span><br><span class=\"line\">  &apos;extraReducers&apos;,</span><br><span class=\"line\">  &apos;extraEnhancers&apos;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>具体 <a href=\"https://github.com/dvajs/dva/blob/master/docs/API_zh-CN.md#appusehooks\" target=\"_blank\" rel=\"noopener\">hooks的作用可以在这里进行查阅</a>。</p>\n<p>Plugin 插件管理类(实际上我认为称其为钩子函数管理类比较合适)除了定义了上文的使用到的use方法(挂载插件)、还有apply方法(执行某一个钩子下挂载的所有回调)、get方法(获取某一个钩子下的所有回调，返回数组)</p>\n<h4 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h4><p>这里的第二步比较简洁：我们知道实际上这里就是使用了<code>plugin.use</code>方法挂载了一个插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(createLoading()); <span class=\"comment\">// 需要注意，插件挂载需要在 app.start 之前</span></span><br></pre></td></tr></table></figure>\n<p>createLoading 这个插件实际上是官方提供的 Loading 插件，通过这个插件我们可以非常方便地进行 Loading 的管理，无需进行手动管理，我们可以先<a href=\"https://www.jianshu.com/p/61fe7a57fad4\" target=\"_blank\" rel=\"noopener\">看一篇文章</a>来简单了解一下。</p>\n<p>这个插件看似神奇，实际上原理也比较简单，主要用了<code>onEffect</code>钩子函数(装饰器)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onEffect</span>(<span class=\"params\">effect, &#123; put &#125;, model, actionType</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; namespace &#125; = model;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (only.length === <span class=\"number\">0</span> &amp;&amp; except.length === <span class=\"number\">0</span>)</span><br><span class=\"line\">        || (only.length &gt; <span class=\"number\">0</span> &amp;&amp; only.indexOf(actionType) !== <span class=\"number\">-1</span>)</span><br><span class=\"line\">        || (except.length &gt; <span class=\"number\">0</span> &amp;&amp; except.indexOf(actionType) === <span class=\"number\">-1</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: SHOW, <span class=\"attr\">payload</span>: &#123; namespace, actionType &#125; &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> effect(...args);</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: HIDE, <span class=\"attr\">payload</span>: &#123; namespace, actionType &#125; &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>结合基于的redux-saga，在目标异步调用开始的时候<code>yield put({ type: SHOW, payload: { namespace, actionType } });</code>，在异步调用结束的时候<code>yield put({ type: HIDE, payload: { namespace, actionType } });</code>，这样就可以管理异步调用开始和结束的Loading状态了。</p>\n<h4 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h4><p>第三步这里其实省略了，因为使用了动态加载，将 Models 定义的内容和 React Component 进行了动态加载，实际上也可以按照注释的方法来写。</p>\n<p>但是没有关系，我们还是可以分析 models 引入的文件中做了哪些事情(下面列出的代码在原基础上进行了一些简化):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> queryString <span class=\"keyword\">from</span> <span class=\"string\">'query-string'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> usersService <span class=\"keyword\">from</span> <span class=\"string\">'../services/users'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  namespace: <span class=\"string\">'users'</span>,</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    list: [],</span><br><span class=\"line\">    total: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    page: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  reducers: &#123;</span><br><span class=\"line\">    save(state, &#123; <span class=\"attr\">payload</span>: &#123; <span class=\"attr\">data</span>: list, total, page &#125; &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; ...state, list, total, page &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  effects: &#123;</span><br><span class=\"line\">    *fetch(&#123; <span class=\"attr\">payload</span>: &#123; page = <span class=\"number\">1</span> &#125; &#125;, &#123; call, put &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; data, headers &#125; = <span class=\"keyword\">yield</span> call(usersService.fetch, &#123; page &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">        type: <span class=\"string\">'save'</span>,</span><br><span class=\"line\">        payload: &#123;</span><br><span class=\"line\">          data,</span><br><span class=\"line\">          total: <span class=\"built_in\">parseInt</span>(headers[<span class=\"string\">'x-total-count'</span>], <span class=\"number\">10</span>),</span><br><span class=\"line\">          page: <span class=\"built_in\">parseInt</span>(page, <span class=\"number\">10</span>),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    *reload(action, &#123; put, select &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> page = <span class=\"keyword\">yield</span> select(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.users.page);</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'fetch'</span>, <span class=\"attr\">payload</span>: &#123; page &#125; &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  subscriptions: &#123;</span><br><span class=\"line\">    setup(&#123; dispatch, history &#125;) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> history.listen(<span class=\"function\">(<span class=\"params\">&#123; pathname, search &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> query = queryString.parse(search);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pathname === <span class=\"string\">'/users'</span>) &#123;</span><br><span class=\"line\">          dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'fetch'</span>, <span class=\"attr\">payload</span>: query &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这些内容，我们通过<code>app.model(require(&#39;./models/users&#39;));</code>就可以引入。</p>\n<p>实际上，model 函数本身还是比较简单的，但由于 dva 拥有 model 动态加载的能力，实际上调用 app.start 前和 app.start 后model函数是不一样的。</p>\n<p>调用 start 函数前，我们直接挂载即可(因为start函数中会对所有model进行遍历性统一处理，所以无需过多处理)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">model</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">      checkModel(m, app._models);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    app._models.push(prefixNamespace(m));</span><br><span class=\"line\">    <span class=\"comment\">// 把 model 注册到 app 的 _models 里面，但是当 app start 之后，就不能仅仅用这种方法了，需要 injectModel</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>调用了 start 函数之后，model函数被替换成如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">injectModel</span>(<span class=\"params\">createReducer, onError, unlisteners, m</span>) </span>&#123;</span><br><span class=\"line\">    model(m);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = app._store;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m.reducers) &#123;</span><br><span class=\"line\">      store.asyncReducers[m.namespace] = getReducer(m.reducers, m.state);</span><br><span class=\"line\">      store.replaceReducer(createReducer(store.asyncReducers));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m.effects) &#123;</span><br><span class=\"line\">      store.runSaga(app._getSaga(m.effects, m, onError, plugin.get(<span class=\"string\">'onEffect'</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m.subscriptions) &#123;</span><br><span class=\"line\">      unlisteners[m.namespace] = runSubscription(m.subscriptions, m, app, onError);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>我们首先分析第一个 if 中的内容</strong>：首先通过getReducer函数将转换好的 reducers 挂载(或替换)到 store.asyncReducers[m.namespace] 中，然后通过 redux 本身提供的能力 replaceReducer 完成 reducer 的替换。</p>\n<p>这里我们需要注意 getReducer 函数，实际上，dva 里面 reducers 写法和我们之前直接使用 redux 的写法略有不同：</p>\n<p>我们这里的 reducers，实际上要和 action 中的 actionType 同名的 reducer，所以这里我们没有必要去写 switch case 了，对于某一个 reducer 来说其行为应该是确定的，这给 reducers 的写法带来了一定的简化，当然，我们可以使用 extraReducers 定义我们之前习惯的那种比较复杂的 reducers。</p>\n<p><strong>接下来我们分析第二个 if 中的内容</strong>：第二个函数首先获取到了我们定义的 effects 并通过 _getSaga 进行处理，然后使用 <code>runSaga</code>(实际上就是createSagaMiddleware().run，来自于redux-saga) 进行执行。</p>\n<p>实际上，这里的 <code>_getSaga</code> 函数比较复杂，我们接下来重点介绍这个函数。</p>\n<p><code>_getSaga</code> 函数由 <code>getSaga.js</code> 暴露，其定义如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSaga</span>(<span class=\"params\">resolve, reject, effects, model, onError, onEffect</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 返回一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> effects) &#123;  <span class=\"comment\">// 这个函数对 effects 里面的所有键</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(effects, key)) &#123; <span class=\"comment\">// 先判断一下键是属于自己的</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> watcher = getWatcher(resolve, reject, key, effects[key], model, onError, onEffect);</span><br><span class=\"line\">        <span class=\"comment\">// 然后调用getWatch获取watcher</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> task = <span class=\"keyword\">yield</span> sagaEffects.fork(watcher); <span class=\"comment\">// 利用 fork 开启一个 task</span></span><br><span class=\"line\">        <span class=\"keyword\">yield</span> sagaEffects.fork(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 这样写的目的是，如果我们移除了这个 model 要及时结束掉</span></span><br><span class=\"line\">          <span class=\"keyword\">yield</span> sagaEffects.take(<span class=\"string\">`<span class=\"subst\">$&#123;model.namespace&#125;</span>/@@CANCEL_EFFECTS`</span>);</span><br><span class=\"line\">          <span class=\"keyword\">yield</span> sagaEffects.cancel(task);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getWatcher 的一些核心代码如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getWatcher</span>(<span class=\"params\">resolve, reject, key, _effect, model, onError, onEffect</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> effect = _effect;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> type = <span class=\"string\">'takeEvery'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ms;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(_effect)) &#123;</span><br><span class=\"line\">    effect = _effect[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> opts = _effect[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 对 opts 进行一定的校验</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">sagaWithCatch</span>(<span class=\"params\">...args</span>) </span>&#123; <span class=\"comment\">// 都会调用这个过程</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> sagaEffects.put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span><span class=\"subst\">$&#123;NAMESPACE_SEP&#125;</span>@@start`</span> &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ret = <span class=\"keyword\">yield</span> effect(...args.concat(createEffects(model)));</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> sagaEffects.put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span><span class=\"subst\">$&#123;NAMESPACE_SEP&#125;</span>@@end`</span> &#125;);</span><br><span class=\"line\">      resolve(key, ret);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      onError(e);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!e._dontReject) &#123;</span><br><span class=\"line\">        reject(key, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> sagaWithOnEffect = applyOnEffect(onEffect, sagaWithCatch, model, key); </span><br><span class=\"line\">  <span class=\"comment\">// 挂载 onEffect 钩子</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'watcher'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> sagaWithCatch;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'takeLatest'</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> takeLatest(key, sagaWithOnEffect);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'throttle'</span>: <span class=\"comment\">// 起到节流的效果，在 ms 时间内仅仅会被触发一次</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> throttle(ms, key, sagaWithOnEffect);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> takeEvery(key, sagaWithOnEffect);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数的工作，可以主要分为以下三个部分：</p>\n<p>1.将 effect 包裹成 sagaWithCatch，除了便于错误处理和增加前后钩子，值得我们注意的是 resolve 和 reject，</p>\n<p>这个 resolve 和 reject，实际上是来自<code>createPromiseMiddleware.js</code></p>\n<p>我们知道，我们在使用redux-saga的过程中，实际上是监听未来的action，并执行 effects，所以我们在一个 effects 函数中执行一些异步操作，然后 put(dispatch) 一个 action，还是会被监听这个 action 的其他 saga 监听到。</p>\n<p>所以就有如下场景：我们 dispatch 一个 action，这个时候如果我们想获取到什么时候监听这个 action 的 saga 中的异步操作执行结束，是办不到的(因为不是所有的时候我们都把所有处理逻辑写在 saga 中)，所以我们的 dispatch 有的时候需要返回一个 Promise 从而我们可以进行异步结束后的回调(这个 Promise 在监听者 saga 异步执行完后被决议，见上文<code>sagaWithCatch</code>函数源代码)。</p>\n<p>如果我讲的还是比较混乱，也可以参考<a href=\"https://github.com/dvajs/dva/issues/175\" target=\"_blank\" rel=\"noopener\">这个issue</a></p>\n<p>对于这个情况，我认为这是 dva 代码最精彩的地方之一，作者通过定义如下的middleware:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> middleware = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> next =&gt; <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> &#123; type &#125; = action;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (isEffect(type)) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       map[type] = &#123;</span><br><span class=\"line\">         resolve: wrapped.bind(<span class=\"literal\">null</span>, type, resolve),</span><br><span class=\"line\">         reject: wrapped.bind(<span class=\"literal\">null</span>, type, reject),</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> next(action);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapped</span>(<span class=\"params\">type, fn, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (map[type]) <span class=\"keyword\">delete</span> map[type];</span><br><span class=\"line\">   fn(args);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">type, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (map[type]) &#123;</span><br><span class=\"line\">     map[type].resolve(args);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reject</span>(<span class=\"params\">type, args</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (map[type]) &#123;</span><br><span class=\"line\">     map[type].reject(args);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>并且在上文的<code>sagaWithCatch</code>相关effect执行结束的时候调用 resolve，让 dispatch 返回了一个 Promise。</p>\n<p>当然，上面这段代码还是有点问题的，这样会导致同名 reducer 和 effect 不会 fallthrough（即两者都执行），因为都已经返回了，action 便不会再进一步传递，关于这样设计的好坏，在<a href=\"https://github.com/sorrycc/blog/issues/48\" target=\"_blank\" rel=\"noopener\">这里</a>有过一些讨论，笔者不进行展开表述。</p>\n<p>2.在上面冗长的第一步之后，又通过<code>applyOnEffect</code>函数包裹了<code>OnEffect</code>的钩子函数，这相当于是一种<code>compose</code>，(上文的 dva-loading 中间件实际上就是在这里被处理的)其实现对于熟悉 redux 的同学来说应该不难理解：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyOnEffect</span>(<span class=\"params\">fns, effect, model, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fn <span class=\"keyword\">of</span> fns) &#123;</span><br><span class=\"line\">    effect = fn(effect, sagaEffects, model, key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.最后，根据我们定义的type(默认是<code>takeEvery</code>，也就是都执行)，来选择不同的 saga，takeLatest 即为只是执行最近的一个，throttle则起到节流的效果，一定时间内仅仅允许被触发一次，这些都是 redux-saga 的内部实现，dva 也是基本直接引用，因此在这里不进行展开。</p>\n<p><strong>最后我们分析<code>injectModel</code>第三个<code>if</code>中的内容</strong>:处理<code>subscriptions</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (m.subscriptions) &#123;</span><br><span class=\"line\">  unlisteners[m.namespace] = runSubscription(m.subscriptions, m, app, onError);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>subscriptions</code>可以理解为和这个model有关的全局监听，但是相对独立。这一个步骤首先调用<code>runSubscription</code>来一个一个调用我们的<code>subscriptions</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">subs, model, app, onError</span>) </span>&#123; <span class=\"comment\">// 在index.js中被重命名为 runSubscription</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> funcs = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nonFuncs = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> subs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(subs, key)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub = subs[key];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> unlistener = sub(&#123;</span><br><span class=\"line\">        dispatch: prefixedDispatch(app._store.dispatch, model),</span><br><span class=\"line\">        history: app._history,</span><br><span class=\"line\">      &#125;, onError);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFunction(unlistener)) &#123;</span><br><span class=\"line\">        funcs.push(unlistener);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        nonFuncs.push(key);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; funcs, nonFuncs &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正如我们所期待的，<code>run</code>函数就是一个一个执行<code>subscriptions</code>，但是这里有一点需要我们注意的，我们定义的<code>subscriptions</code>应该是需要返回一个<code>unlistener</code>来返回接触函数，这样当整个 model 被卸载的时候 dva 会自动调用这个接解除函数(也就是为什么这里的返回函数被命名为<code>unlistener</code>)</p>\n<h4 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h4><p>源代码中的第四步，是对 router 的挂载：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.router(<span class=\"built_in\">require</span>(<span class=\"string\">'./router'</span>));</span><br></pre></td></tr></table></figure>\n<p><code>require(&#39;./router&#39;)</code>返回的内容在源代码中经过一系列引用传递最后直接被构造成 React Component 并且最终调用 ReactDom.render 进行渲染，这里没有什么好说的，值得一提的就是 router 的动态加载。</p>\n<p>动态加载在该样例中是这样使用的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, Switch, Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva/router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> dynamic <span class=\"keyword\">from</span> <span class=\"string\">'dva/dynamic'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">RouterConfig</span>(<span class=\"params\">&#123; history, app &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> IndexPage = dynamic(&#123;</span><br><span class=\"line\">    app,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./routes/IndexPage'</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> Users = dynamic(&#123;</span><br><span class=\"line\">    app,</span><br><span class=\"line\">    models: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [</span><br><span class=\"line\">      <span class=\"keyword\">import</span>(<span class=\"string\">'./models/users'</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./routes/Users'</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  history.listen(<span class=\"function\">(<span class=\"params\">location, action</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'history listen:'</span>, location, action)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">      &lt;Switch&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/\"</span> component=&#123;IndexPage&#125; /&gt;</span><br><span class=\"line\">        &lt;Route exact path=<span class=\"string\">\"/users\"</span> component=&#123;Users&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Router&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看出，主要就是利用<code>dva/dynamic.js</code>暴露的 dynamic 函数进行动态加载，接下来我们简单看一下 dynamic 函数做了什么:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dynamic</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; app, <span class=\"attr\">models</span>: resolveModels, <span class=\"attr\">component</span>: resolveComponent &#125; = config;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> asyncComponent(&#123;</span><br><span class=\"line\">    resolve: config.resolve || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> models = <span class=\"keyword\">typeof</span> resolveModels === <span class=\"string\">'function'</span> ? resolveModels() : [];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> component = resolveComponent();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.all([...models, component]).then(<span class=\"function\">(<span class=\"params\">ret</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!models || !models.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(ret[<span class=\"number\">0</span>]);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> len = models.length;</span><br><span class=\"line\">            ret.slice(<span class=\"number\">0</span>, len).forEach(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">              m = m.default || m;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(m)) &#123;</span><br><span class=\"line\">                m = [m];</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              m.map(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> registerModel(app, _)); <span class=\"comment\">// 注册所有的 model</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            resolve(ret[len]);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...config,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里主要调用了 asyncComponent 函数，接下来我们再看一下这个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncComponent</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; resolve &#125; = config;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(...args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(...args);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.LoadingComponent =</span><br><span class=\"line\">        config.LoadingComponent || defaultLoadingComponent;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">        AsyncComponent: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.load();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mounted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mounted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    load() &#123;</span><br><span class=\"line\">      resolve().then(<span class=\"function\">(<span class=\"params\">m</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> AsyncComponent = m.default || m;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.mounted) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.setState(&#123; AsyncComponent &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.state.AsyncComponent = AsyncComponent; <span class=\"comment\">// eslint-disable-line</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; AsyncComponent &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; LoadingComponent &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (AsyncComponent) <span class=\"keyword\">return</span> &lt;AsyncComponent &#123;...this.props&#125; /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">      return &lt;LoadingComponent &#123;...this.props&#125; /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数逻辑比较简洁，我们分析一下动态加载流程；</p>\n<ul>\n<li>在 constructor 里面调用 <code>this.load();</code> ( LoadingComponent 为占位 component)</li>\n<li>在 <code>this.load();</code> 函数里面调用 <code>dynamic</code> 函数返回的 resolve 方法</li>\n<li>resolve 方法实际上是一个 Promise，把相关 models 和 component 加载完之后 resolve (区分这两个 resolve)</li>\n<li>加载完成之后返回 AsyncComponent (即加载的 Component)</li>\n</ul>\n<p>动态加载主流程结束，至于动态加载的代码分割工作，可以使用 webpack3 的 <code>import()</code> 动态加载能力(例子中也是这样使用的)。</p>\n<h4 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h4><p>第五步骤就是 start 了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.start(<span class=\"string\">'#root'</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候如果我们在 start 函数中传入 DomElement 或者 DomQueryString，就会直接启动应用了，如果我们这个时候不传入任何内容，实际上返回的是一个<code>&lt;Provider /&gt;</code> (React Component)，便于服务端渲染。 相关判断逻辑如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (container) &#123;</span><br><span class=\"line\">     render(container, store, app, app._router);</span><br><span class=\"line\">     app._plugin.apply(<span class=\"string\">'onHmr'</span>)(render.bind(<span class=\"literal\">null</span>, container, store, app));</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> getProvider(store, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>._router);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>至此，主要流程结束，以上几个步骤也包括了 dva 源码做的主要工作。</p>\n<p>当然 dva 源码中还有一些比如前缀处理等工作，但是相比于以上内容非常简单，所以在这里不进行分析了。</p>\n<h3 id=\"dva-core-文件目录\"><a href=\"#dva-core-文件目录\" class=\"headerlink\" title=\"dva-core 文件目录\"></a>dva-core 文件目录</h3><p>dva-core中的源码文件目录以及其功能:</p>\n<ul>\n<li>checkModel 对我们定义的 Model 进行检查是否符合要求</li>\n<li>constants 非常简单的常量文件，目前只定义了一个常量：NAMESPACE_SEP(/)</li>\n<li>cratePromiseMiddleware 笔者自己定义的 redux 插件</li>\n<li>createStore 封装了 redux 原生的 createStore</li>\n<li>getReducer 这里面的函数其实主要就是调用了 handleActions 文件导出的函数</li>\n<li>getSaga 将用户输入的 effects 部分的键值对函数进行管理</li>\n<li>handleActions 是将 dva 风格的 reducer 和 state 转化成 redux 本来接受的那种方式</li>\n<li>index 主入口文件</li>\n<li>Plugin 插件类：可以管理不同钩子事件的回调函数，拥有增加、获取、执行钩子函数的功能</li>\n<li>perfixedDispatch 该文件提供了对 Dispatch 增加前缀的工具性函数 prefixedDispatch</li>\n<li>prefixNamespace 该文件提供了对 reducer 和 effects 增加前缀的工具性函数 prefixNamespace</li>\n<li>prefixType 判断是 reducer 还是 effects</li>\n<li>subscriptions 该文件提供了运行 subscriptions 和调用用户返回的 unlisten 函数以及删除缓存的功能</li>\n<li>utils 提供一些非常基础的工具函数</li>\n</ul>\n<h3 id=\"优势总结\"><a href=\"#优势总结\" class=\"headerlink\" title=\"优势总结\"></a>优势总结</h3><ul>\n<li>动态 model，已经封装好了整套调用，动态添加/删除 model 变得非常简单</li>\n<li>默认封装好了管理 effects 的方式，有限可选可配置，降低学习成本的同时代码更利于维护</li>\n<li>易于上手，集成redux、redux-saga、react-router等常用功能</li>\n</ul>\n<h3 id=\"劣势总结\"><a href=\"#劣势总结\" class=\"headerlink\" title=\"劣势总结\"></a>劣势总结</h3><ul>\n<li>版本区隔不明显，dva 有 1.x 和 2.x 两种版本，之间API有些差异，但是官网提供的一些样例等中没有说明基于的版本，并且有的还是基于旧版本的，会给新手带来很多疑惑。</li>\n<li>内容繁杂，但是却没有一个整合性质的官方网站，大都是通过 list 的形式列下来写在README的。</li>\n<li>目前比如动态加载等还存在着一些问题，和直接采用react配套工具写的效果有所区别。</li>\n<li>很多 issues 不知道为什么就被关闭了，作者在最后也并未给出合理的解释。</li>\n<li>dva2 之后有点将 effects 和 actions 混淆，这一点我也并不是非常认同，当然原作者可能有自己的考虑，这里不过多评议。</li>\n</ul>\n<p>总之，作为一个个人主力的项目(主要开发者贡献了99%以上的代码)，可以看出作者的功底深厚，经验丰富，但是由于这样一个体系化的东西牵扯内容较多，并且非常受制于react、redux、react-router、redux-saga等的版本影响，<strong>不建议具备一定规模的非阿里系团队在生产环境中使用</strong>，但是如果是快速成型的中小型项目或者个人应用，使用起来还是有很大帮助的。</p>\n<h3 id=\"TODOS\"><a href=\"#TODOS\" class=\"headerlink\" title=\"TODOS\"></a>TODOS</h3><p>笔者也在准备做一个和 dva 处于同一性质，但是设计、实现和使用有所区别的框架，希望能够尽快落成。</p>\n","categories":[],"tags":["前端框架"]},{"title":"CentOS7下安装和配置redis","url":"http://ginkwang.github.io/2016/10/04/CentOS7下安装和配置redis/","content":"<p>Redis是一个高性能的，开源key-value型数据库。是构建高性能，可扩展的Web应用的完美解决方案，可以内存存储亦可持久化存储。因为要使用跨进程，跨服务级别的数据缓存，在对比多个方案后，决定使用Redis。顺便整理下Redis的安装过程，以便查阅。</p>\n<p> 1 . 下载Redis<br>目前，最新的Redist版本为3.0，使用wget下载，命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># wget http://download.redis.io/releases/redis-3.0.4.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p> 2 . 解压Redis<br>下载完成后，使用tar命令解压下载文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># tar -xzvf redis-3.0.4.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>3 . 编译安装Redis<br>切换至程序目录，并执行make命令编译：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd redis-3.0.4</span><br><span class=\"line\"># make</span><br></pre></td></tr></table></figure></p>\n<p>执行安装命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># make install</span><br></pre></td></tr></table></figure></p>\n<p>make install安装完成后，会在/usr/local/bin目录下生成下面几个可执行文件，它们的作用分别是：</p>\n<ul>\n<li>redis-server：Redis服务器端启动程序</li>\n<li>redis-cli：Redis客户端操作工具。也可以用telnet根据其纯文本协议来操作</li>\n<li>redis-benchmark：Redis性能测试工具</li>\n<li>redis-check-aof：数据修复工具</li>\n<li>redis-check-dump：检查导出工具</li>\n</ul>\n<p>备注</p>\n<p>有的机器会出现类似以下错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make[1]: Entering directory `/root/redis/src&apos;</span><br><span class=\"line\">You need tcl 8.5 or newer in order to run the Redis test</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure></p>\n<p>这是因为没有安装tcl导致，yum安装即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install tcl</span><br></pre></td></tr></table></figure></p>\n<p>4 . 配置Redis<br>复制配置文件到/etc/目录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cp redis.conf /etc/</span><br></pre></td></tr></table></figure></p>\n<p>为了让Redis后台运行，一般还需要修改redis.conf文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p>修改daemonize配置项为yes，使Redis进程在后台运行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize yes</span><br></pre></td></tr></table></figure></p>\n<p>5 . 启动Redis<br>配置完成后，启动Redis：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd /usr/local/bin</span><br><span class=\"line\"># ./redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p>检查启动情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ps -ef | grep redis</span><br></pre></td></tr></table></figure></p>\n<p>看到类似下面的一行，表示启动成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root     18443     1  0 13:05 ?        00:00:00 ./redis-server *:6379</span><br></pre></td></tr></table></figure></p>\n<p>6 . 添加开机启动项<br>让Redis开机运行可以将其添加到rc.local文件，也可将添加为系统服务service。本文使用rc.local的方式，添加service请参考：Redis 配置为 Service 系统服务 。</p>\n<p>为了能让Redis在服务器重启后自动启动，需要将启动命令写入开机启动项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;/usr/local/bin/redis-server /etc/redis.conf&quot; &gt;&gt;/etc/rc.local</span><br></pre></td></tr></table></figure></p>\n<p>7 . Redis配置参数<br>在 前面的操作中，我们用到了使Redis进程在后台运行的参数，下面介绍其它一些常用的Redis启动参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize：是否以后台daemon方式运行</span><br><span class=\"line\">pidfile：pid文件位置</span><br><span class=\"line\">port：监听的端口号</span><br><span class=\"line\">timeout：请求超时时间</span><br><span class=\"line\">loglevel：log信息级别</span><br><span class=\"line\">logfile：log文件位置</span><br><span class=\"line\">databases：开启数据库的数量</span><br><span class=\"line\">save * *：保存快照的频率，第一个*表示多长时间，第三个*表示执行多少次写操作。在一定时间内执行一定数量的写操作时，自动保存快照。可设置多个条件。</span><br><span class=\"line\">rdbcompression：是否使用压缩</span><br><span class=\"line\">dbfilename：数据快照文件名（只是文件名）</span><br><span class=\"line\">dir：数据快照的保存目录（仅目录）</span><br><span class=\"line\">appendonly：是否开启appendonlylog，开启的话每次写操作会记一条log，这会提高数据抗风险能力，但影响效率。</span><br><span class=\"line\">appendfsync：appendonlylog如何同步到磁盘。三个选项，分别是每次写都强制调用fsync、每秒启用一次fsync、不调用fsync等待系统自己同步</span><br></pre></td></tr></table></figure></p>\n","categories":[],"tags":["centOS","redis"]},{"title":"centOS7.2搭建nginx环境以及负载均衡","url":"http://ginkwang.github.io/2016/08/03/centOS7-2搭建nginx环境以及负载均衡/","content":"<p> 之所以要整理出这篇文章，是因为1是搭建环境的过程中会遇到大大小小各种问题，2是网上目前也没有关于centos7.2搭建nginx环境的问题整理，因此在这里记录。</p>\n<p>前置工作就不赘述了，首先<code>ssh root@115.29.102.81</code> (换成你们自己的公网IP)登陆进入到自己的服务器命令行，之后开始基本的安装：</p>\n<p><strong>1.添加资源</strong></p>\n<p>添加CentOS 7 Nginx yum资源库,打开终端,使用以下命令(没有换行):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p><strong>2.安装Nginx</strong></p>\n<p>在你的CentOS 7 服务器中使用yum命令从Nginx源服务器中获取来安装Nginx：</p>\n<blockquote>\n<p><em>这里有一个需要注意的地方，尽量不要用网上的下载源码包然后再传到服务器上的方式进行安装，因为nginx已经不算是简单的Linux了，做了很多扩展，这个时候如果你用源码包安装会出现各种各样的问题，尽量用已经封装好的rpm\\yum进行安装</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y nginx</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>Nginx将完成安装在你的CentOS 7 服务器中。</p>\n<p><strong>3.启动Nginx</strong></p>\n<p>刚安装的Nginx不会自行启动。运行Nginx:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start nginx.service</span><br></pre></td></tr></table></figure></p>\n<p>如果一切进展顺利的话，现在你可以通过你的域名或IP来访问你的Web页面来预览一下Nginx的默认页面</p>\n<blockquote>\n<p>当然，这里一般很可能会无法访问的。</p>\n</blockquote>\n<p>我们先不急于解决我们的问题，先看看nginx的基本配置：</p>\n<p>Nginx配置信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网站文件存放默认目录</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/share/nginx/html</span><br><span class=\"line\">网站默认站点配置</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/conf.d/default.conf</span><br><span class=\"line\">自定义Nginx站点配置文件存放目录,自己在这里也可以定义别的名字的.conf，这个的作用以后再说。</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/conf.d/</span><br><span class=\"line\">Nginx全局配置</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/nginx/nginx.conf</span><br><span class=\"line\">在这里你可以改变设置用户运行Nginx守护程序进程一样,和工作进程的数量得到了Nginx正在运行,等等。</span><br></pre></td></tr></table></figure></p>\n<p>Linux查看公网IP</p>\n<p>您可以运行以下命令来显示你的服务器的公共IP地址:(这个其实没用，不是公网IP)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr show eth0 | grep inet | awk &apos;&#123; print $2; &#125;&apos; | sed &apos;s/\\/.*$//&apos;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>好了，这个时候我们再来看看可能遇到的问题：无法在公网访问。</p>\n<p>这个时候首先看看配置文件default.conf对不对，一个正确的例子：<br>(域名要先进行解析到响应的IP)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  nginx.310058.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   /usr/share/nginx/html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ \\.php$ &#123;</span><br><span class=\"line\">    #    root           html;</span><br><span class=\"line\">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    #    fastcgi_index  index.php;</span><br><span class=\"line\">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">    #    include        fastcgi_params;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class=\"line\">    # concurs with nginx&apos;s one</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #location ~ /\\.ht &#123;</span><br><span class=\"line\">    #    deny  all;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>确定文件没问题了，看看这个时候是不是开启了nginx进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n<p>应该会输出一个或者多个进程，如果没有的话就开启或者重启试试看。</p>\n<p>这个时候接下来再试试在服务器上：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping  115.29.102.81</span><br><span class=\"line\">telnet 115.29.102.81 80</span><br><span class=\"line\">wget nginx.310058.cn</span><br></pre></td></tr></table></figure></p>\n<p>如果有的命令没有就直接yum安装下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install telnet</span><br></pre></td></tr></table></figure></p>\n<p>如果都可以的话，之后在本机尝试以上三行。如果没有命令也要安装下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install wget</span><br></pre></td></tr></table></figure></p>\n<p>发现很可能本机telnet不通，而服务器telnet通。<br>这个时候就是<strong>防火墙</strong>的问题。</p>\n<p>####centos7.2防火墙</p>\n<p>由于centos 7版本以后默认使用firewalld后，网上关于iptables的设置方法已经不管用了，所以根本就别想用配置iptables做啥，根本没用。</p>\n<p>查看下防火墙状态：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ28dcsp7egZ conf.d]# systemctl status firewalld  </span><br><span class=\"line\">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Wed 2016-08-03 12:06:44 CST; 2h 49min ago</span><br><span class=\"line\"> Main PID: 424 (firewalld)</span><br><span class=\"line\">   CGroup: /system.slice/firewalld.service</span><br><span class=\"line\">           └─424 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid</span><br><span class=\"line\"></span><br><span class=\"line\">Aug 03 12:06:41 iZ28dcsp7egZ systemd[1]: Starting firewalld - dynamic firewall daemon...</span><br><span class=\"line\">Aug 03 12:06:44 iZ28dcsp7egZ systemd[1]: Started firewalld - dynamic firewall daemon.</span><br></pre></td></tr></table></figure></p>\n<p>增加80端口的权限：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></p>\n<p> 别忘了更新防火墙的配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p>\n<p>这个时候再<code>restart  nginx.service</code> 一下就会发现应该好了。</p>\n<p>nginx 停止：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx restart</span><br><span class=\"line\">也可以重启nginx</span><br><span class=\"line\"></span><br><span class=\"line\">kill -QUIT 进程号  </span><br><span class=\"line\">#从容停止</span><br><span class=\"line\"></span><br><span class=\"line\">kill -TERM 进程号</span><br><span class=\"line\">#或者</span><br><span class=\"line\">kill -INT 进程号</span><br><span class=\"line\">#快速停止</span><br><span class=\"line\"></span><br><span class=\"line\">p-kill -9 nginx</span><br><span class=\"line\">强制停止</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -t </span><br><span class=\"line\">#验证配置文件 前提是进入相应的配置的目录（自己实际测试的时候发现没有进入相应的配置目录也是可以的）</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\">#重启</span><br><span class=\"line\"></span><br><span class=\"line\">kill -HUP 进程号</span><br><span class=\"line\">#重启的另外一种方式</span><br></pre></td></tr></table></figure>\n<p>官方文档地址：<br><a href=\"https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#sec-Introduction_to_firewalld\" target=\"_blank\" rel=\"noopener\">https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/sec-Using_Firewalls.html#sec-Introduction_to_firewalld</a></p>\n<p>附1:一个简单的负载均衡的实现:<br>weight默认是1，自己也可以更改。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream mypro &#123;</span><br><span class=\"line\">\t\t\t\tip_hash;</span><br><span class=\"line\">                server 111.13.100.92 weight=2;</span><br><span class=\"line\">                server 183.232.41.1;</span><br><span class=\"line\">                server 42.156.140.7;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        server &#123;</span><br><span class=\"line\">                listen 8090;</span><br><span class=\"line\">                location / &#123;</span><br><span class=\"line\">                proxy_pass http://mypro;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>附2:防火墙基本学习：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1、firewalld简介</span><br><span class=\"line\">firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念</span><br><span class=\"line\"> </span><br><span class=\"line\">firewalld有图形界面和工具界面，由于我在服务器上使用，图形界面请参照官方文档，本文以字符界面做介绍</span><br><span class=\"line\"> </span><br><span class=\"line\">firewalld的字符界面管理工具是 firewall-cmd </span><br><span class=\"line\"> </span><br><span class=\"line\">firewalld默认配置文件有两个：/usr/lib/firewalld/ （系统配置，尽量不要修改）和 /etc/firewalld/ （用户配置地址）</span><br><span class=\"line\"> </span><br><span class=\"line\">zone概念：</span><br><span class=\"line\">硬件防火墙默认一般有三个区，firewalld引入这一概念系统默认存在以下区域（根据文档自己理解，如果有误请指正）：</span><br><span class=\"line\">drop：默认丢弃所有包</span><br><span class=\"line\">block：拒绝所有外部连接，允许内部发起的连接</span><br><span class=\"line\">public：指定外部连接可以进入</span><br><span class=\"line\">external：这个不太明白，功能上和上面相同，允许指定的外部连接</span><br><span class=\"line\">dmz：和硬件防火墙一样，受限制的公共连接可以进入</span><br><span class=\"line\">work：工作区，概念和workgoup一样，也是指定的外部连接允许</span><br><span class=\"line\">home：类似家庭组</span><br><span class=\"line\">internal：信任所有连接</span><br><span class=\"line\">对防火墙不算太熟悉，还没想明白public、external、dmz、work、home从功能上都需要自定义允许连接，具体使用上的区别还需高人指点</span><br><span class=\"line\"> </span><br><span class=\"line\">2、安装firewalld</span><br><span class=\"line\">root执行 # yum install firewalld firewall-config</span><br><span class=\"line\"> </span><br><span class=\"line\">3、运行、停止、禁用firewalld</span><br><span class=\"line\">启动：# systemctl start  firewalld</span><br><span class=\"line\">查看状态：# systemctl status firewalld 或者 firewall-cmd --state</span><br><span class=\"line\">停止：# systemctl disable firewalld</span><br><span class=\"line\">禁用：# systemctl stop firewalld</span><br><span class=\"line\"> </span><br><span class=\"line\">4、配置firewalld</span><br><span class=\"line\">查看版本：$ firewall-cmd --version</span><br><span class=\"line\">查看帮助：$ firewall-cmd --help</span><br><span class=\"line\">查看设置：</span><br><span class=\"line\">                显示状态：$ firewall-cmd --state</span><br><span class=\"line\">                查看区域信息: $ firewall-cmd --get-active-zones</span><br><span class=\"line\">                查看指定接口所属区域：$ firewall-cmd --get-zone-of-interface=eth0</span><br><span class=\"line\">拒绝所有包：# firewall-cmd --panic-on</span><br><span class=\"line\">取消拒绝状态：# firewall-cmd --panic-off</span><br><span class=\"line\">查看是否拒绝：$ firewall-cmd --query-panic</span><br><span class=\"line\"> </span><br><span class=\"line\">更新防火墙规则：# firewall-cmd --reload</span><br><span class=\"line\">                            # firewall-cmd --complete-reload</span><br><span class=\"line\">    两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务</span><br><span class=\"line\"> </span><br><span class=\"line\">将接口添加到区域，默认接口都在public</span><br><span class=\"line\"># firewall-cmd --zone=public --add-interface=eth0</span><br><span class=\"line\">永久生效再加上 --permanent 然后reload防火墙</span><br><span class=\"line\"> </span><br><span class=\"line\">设置默认接口区域</span><br><span class=\"line\"># firewall-cmd --set-default-zone=public</span><br><span class=\"line\">立即生效无需重启</span><br><span class=\"line\"> </span><br><span class=\"line\">打开端口（貌似这个才最常用）</span><br><span class=\"line\">查看所有打开的端口：</span><br><span class=\"line\"># firewall-cmd --zone=dmz --list-ports</span><br><span class=\"line\">加入一个端口到区域：</span><br><span class=\"line\"># firewall-cmd --zone=dmz --add-port=8080/tcp</span><br><span class=\"line\">若要永久生效方法同上</span><br><span class=\"line\"> </span><br><span class=\"line\">打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档</span><br><span class=\"line\"># firewall-cmd --zone=work --add-service=smtp</span><br><span class=\"line\"> </span><br><span class=\"line\">移除服务</span><br><span class=\"line\"># firewall-cmd --zone=work --remove-service=smtp</span><br><span class=\"line\"> </span><br><span class=\"line\">还有端口转发功能、自定义复杂规则功能、lockdown，由于还没用到，以后再学习</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"about","url":"http://ginkwang.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://ginkwang.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://ginkwang.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://ginkwang.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://ginkwang.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://ginkwang.github.io/tag/index.html","content":"","categories":[],"tags":[]}]